{"version":3,"sources":["logo.svg","surveyQuestion.js","actions/index.js","Questionnaire.js","results.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SurveyQuestion","num","this","props","answerQuestion","getKey","left","right","nums","Array","from","keys","map","el","reversed","reverse","getOrderedScores","type","name","style","margin","onChange","updateSelected","textAlign","_renderRadioButtons","React","Component","mapDispatchToProps","key","score","connect","wordPairs","require","Questionnaire","pair","Results","state","isShowingResults","setState","onClick","onShowResults","_","answers","console","log","Object","values","overall","reduce","total","answer","subscales","div","wordPairKeysForSubscale","filter","subscale","pick","resultsFromAnswers","questionState","result","paddingRight","toFixed","paddingTop","_renderShowButton","_renderResults","action","assign","store","createStore","rootReducer","App","className","paddingBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6d7e65a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { answerQuestion } from './actions';\n\nexport class SurveyQuestion extends React.Component {\n  updateSelected(num) {\n    this.props.answerQuestion(this.getKey(), num);\n  }\n\n  getKey() {\n    return `${this.props.left}_${this.props.right}`;\n  }\n\n  getOrderedScores() {\n    const nums = Array.from(Array(7).keys()).map(el => el);\n    if (this.props.reversed) {\n      return nums;\n    }\n    return nums.reverse();\n  }\n\n  _renderRadioButtons() {\n    return (\n      <span>\n      {\n        this.getOrderedScores().map((num) => {\n          return (<input type=\"radio\" name={this.getKey()} style={{margin: '20px'}} onChange={() => this.updateSelected(num)}/>)\n        })\n      }\n      </span>\n    );\n  }\n\n  render() {\n    return (\n      <tr>\n        <td style={{textAlign: 'right'}}>{this.props.left}</td>\n        {this._renderRadioButtons()}\n        <td style={{textAlign: 'left'}}>{this.props.right}</td>\n      </tr>\n    );\n  }\n}\n\nconst mapDispatchToProps = { answerQuestion };\n\nexport default connect(null, mapDispatchToProps)(SurveyQuestion);\n","export const answerQuestion = (key, score) => ({\n  type: 'ANSWER_QUESTION',\n  key,\n  score,\n});\n","import React from 'react';\n\nimport SurveyQuestion from './surveyQuestion.js';\n\nconst wordPairs = require('./wordPairs.json');\n\nconst Questionnaire = (props) => {\n  return (\n    <div>\n    {\n      wordPairs.wordPairs.map(pair => {\n        return (\n          <SurveyQuestion left={pair.left} right={pair.right} reversed={pair.reversed} />\n        );\n      })\n    }\n    </div>\n  )\n}\n\nexport default Questionnaire;\n","import React from 'react';\nimport * as _ from 'lodash';\n\nimport { connect } from 'react-redux';\n\nconst wordPairs = require('./wordPairs.json');\n\nconst OVERALL_DIVISOR = 192;\n\nconst resultsFromAnswers = (answers) => {\n  console.log(Object.values(answers));\n  const overall = Object.values(answers).reduce((total, answer) => total + answer, 0);\n  const subscales = _.mapValues(wordPairs.subscales, (div, key) => {\n    const wordPairKeysForSubscale = wordPairs.wordPairs\n      .filter(pair => pair.subscale === key)\n      .map(pair => `${pair.left}_${pair.right}`);\n    const score = _(answers).pick(wordPairKeysForSubscale).reduce((total, score) => total + score, 0);\n    return score / div;\n    // get all wordpairs for the key, look them up in answers, and add them together\n  })\n  return {\n    overall: overall / OVERALL_DIVISOR,\n    ...subscales,\n  };\n}\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isShowingResults: false };\n  }\n  onShowResults() {\n    this.setState((state) => {\n      return { isShowingResults: !state.isShowingResults }\n    });\n  }\n\n  _renderShowButton() {\n    return (\n      <button onClick={() => this.onShowResults()}>Show results</button>\n    )\n  }\n\n  _renderResults() {\n    return (\n      <div style={{textAlign: 'left'}}>\n        {\n          _.map(resultsFromAnswers(this.props.questionState), (result, key) => {\n            return (\n              <tr>\n                <td style={{paddingRight: '10px'}}>{key}</td>\n                <td>{result.toFixed(2)}</td>\n              </tr>\n            );\n          })\n        }\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ paddingTop: '30px' }}>\n        {this._renderShowButton()}\n        {this.state.isShowingResults && this._renderResults()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { questionState: state };\n};\n\nexport default connect(mapStateToProps)(Results);\n","const answers = (state = {}, action) => {\n  switch (action.type) {\n    case 'ANSWER_QUESTION':\n      return Object.assign({}, state, {\n        [action.key]: action.score,\n      });\n    default:\n      return state\n  }\n}\n\nexport default answers;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport Questionnaire from './Questionnaire';\nimport Results from './results';\nimport { SurveyQuestion } from './surveyQuestion';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\" style={{paddingBottom: '200px'}}>\n          <Questionnaire style={{margin: 'auto'}}/>\n          <Results />\n        </header>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}